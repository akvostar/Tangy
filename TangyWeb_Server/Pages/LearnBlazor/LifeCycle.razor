@page "/learnBlazor/lifecycle"
@using System.Threading
<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br /> 

@Count <button @onclick=StartCountdown>Start Countdown</button>

<div class="border" style="display:flex;justify-content:space-around">
    <div>
        <h3>Parent</h3>
    <hr />
        @foreach(var item in EventType)
        {
            @item
                <hr />
        }
    </div>
    <_LifeCycleChild @ref="childComp" EventType="@EventType" CountValue="@currentCount"></_LifeCycleChild>

</div>





@code {
    private _LifeCycleChild childComp;

    private int currentCount = 0;
    //List<string> EventType = new List<string>();
    public List<string> EventType { get; set; } = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }


    protected override void OnInitialized()
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnInitializedAsync is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnParametersSetAsync is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;

        }
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add(DateTime.Now.ToString("mm:ss ffff") + ": Parent - ShouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if(Count > 0)
        {
            Count--;
            //InvokeAsync(StateHasChanged);
        }
    }
}